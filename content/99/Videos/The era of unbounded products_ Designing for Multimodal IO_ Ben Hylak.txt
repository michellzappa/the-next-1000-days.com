[Music] I'm so excited to be here with you guys today and I think what is uh probably the coolest uh AI conference uh in the world at such an exciting exciting time in history I think especially for AI products um if you don't already know me from either demos on Twitter or sometimes probably ill-advised spicy takes on Twitter uh my name is Ben hilac and uh I'm the founder of dawn so at dawn we help some of the best companies in the world everyone from GitHub to can of soup build better more predictable AI products my entire life I've been like really obsessed with building and designing unbounded products so unbounded products are products that transcend the uh the the mouse the monitor in some way right so for me that started with robotics uh when I was I think the first one was when I was in e8th grade uh eventually rockets at SpaceX so these are very these are very unbounded products right um and then most recently uh I was on the design team for the Apple Vision Pro for four years so we designed the first version of vision OS I think that AI makes products less bounded than they've ever been right you can type you can talk you can show images or show video just like we just saw you can also sort of plead you can bargain you can confide right these are very interesting sort of input modalities and this unboundedness often makes products unpredictable right confusing hard to understand users assume your product can do things that it can't they try to do those things doesn't work and they walk away thinking that it can't even do the things that it can't when you talk to people and specifically people that are not in this room how they use chat chbt how they learn how to use it it's often word of mouth right so they hear one of their friends say that they used it for travel planning and then they go use it for travel planning a lot of us a lot of us in this room especially like people that are more technical we often learn through trial and error right so we just keep trying keep trying we keep trying because we know that these models are good right we know that it's impressive um but a lot of people are not they don't do the trial and error thing right so they try it once it doesn't work uh they don't try again and so this talk is about making good AI products and to that end I'm going to cover just three things so those three things are the past right so how have products become more unbounded and what has worked for unbounded products in the past the present which is AI products today what are sort of good design patterns and bad design patterns and then the third point is going to be the future right so again just three things just the past the present and the future easy so we're going to start with the past so most software that we use lives on a screen right and you use it just by typing sorry you use it primarily by swiping clicking and tapping right uh when you click something whatever the developer expected to happen is what happens depending on how good of a developer you are it's easy for users to understand what your app can do they look they see the buttons they get it it's also very easy for you to understand what your users are doing you just add a amplitude or mix panel call on a button press you see what they did so if you think about one of the biggest changes to this uh previous to the last two years was multi-touch right and this is just like instead of one pointer you have two but just by adding that second pointer you get relative distance you get rotation right and just this one little change like largely made the smartphone possible Right like largely made it easy to use a screen that is that small and now it's just getting crazy right it's like we have unbounded products everywhere products are so unbounded you have software you know just freely roaming the Streets of San Francisco getting attacked by fiery mobs right so this is getting crazy um and so I want to talk a little bit about just one unbounded product that's I got to work on uh which is the Vision Pro and what I want to talk about is just three lessons that we learned while we were designing it lessons that I think aren't as intuitive looking from the outside in so I think that unbounded products are often defined by this what if question like when we were starting it's like users get themselves into the craziest situations so something as simple as oh well what if someone's in the living room and then they move to the bedroom and they lay down on their bed right what should happen to your apps if you're designing maccos that's on a laptop you don't have to worry about that but that's something we had to think about and there's hundreds of more questions like this right what if someone's on a plane what if someone's next to their friend what if someone has a a disability of some sort right like uh they cannot move they can't move their neck they're bed rded so all these wh ifs and I think this is again what defines unbounded products right all of us that are building AI products we're constantly thinking you know oh like what if someone puts in this what if someone puts in that and there's evals etc etc and so without structure you just have chaos right you have a blank slate you have all these wh ifs um infinite world of possibilities and so it's really on us as product design designers to add structure and structure is what creates Clarity so again I want to talk about three ways we added structure the first was highlighting what matters and doing it really fast so the first thing you see in Vision OS is a home screen it has apps it has people and it has environments so those are the things that we think matter when you're using Vision OS so they're the first thing you see might not sound that novel and it's not in a lot of ways it's the same thing that happens on your iPhone but when you compare it to VR products that came before it's very hard to understand how you're actually you know what is this thing good for when you look at this menu the second point is hierarchy hierarchy is what gives unbounded products a shape and a purpose right it's what helps users understand what it's good for what they should use it for so again we have the home menu that's kind of where everything starts and ends for vision OS we have Windows they have bounds you can resize them and move them and any individual window can go full screen right so that was our hierarchy the last point which is really important and I think the easiest way to make unbounded products feel familiar is sorry intuitive I got ahead of myself is familiar familiarity uh it was something we hit when we were building Dawn our first kind of prototype was this star cluster thing that you could explore is really fun um nowadays it looks a lot more like this which are you know tables and we have graphs and examples again it's just structure Clarity and I think that it's no accident that you know the TV app on Vision OS looks a lot like the TV app on tvos right it's not an accident it wasn't laziness uh when people are sort of in Uncharted Territory you want to give them as many signs as home signs of home as possible same thing for control center right when people see Vision OS they already know how to use it so again these three points highlighting what matters bringing that to the Forefront establishing hierarchy and then leveraging familiarity all right and so that was the past now we're going to talk about the present and specifically we're going to talk about AI products we're going to talk about ways both good and bad that product s have been incorporating structure into their AI features it's really important to note the right Str sorry the right structure is very unique to your app right that's the whole point is that it gives your app a shape it helps your user understand what it's actually for so let's take something like dot right dot is a companion dot is sort of a journal at least for me and so the structure they added was that if you pinch out you can see each day separated right it feels a lot like a journal and if you tap a person or two people in this case my co-founders I can see this again structured information about them and a timeline every time I mention them to Dot and so again you're pulling that structure out of the chat perplexity does a really good job of using structure to make their experience feel more like a search engine and less like chbt less like a chat you're having a conversation with right and they do this by you know really pulling your title you know your query up top as like a title you know highlighting the sources it came from and then having the answer below that right and then having that take up the full page kind of regardless so it makes it feel again like more like one shot less something you're having a back and forth with now I want to talk about uh sort of an anti- pattern I've seen which is um this is in the the versel uh chatbot demo I think versell does some of the coolest design work in the entire world I didn't like this one um so this is like having this idea of almost ephemeral UI but inside the flow of chat right and I get the appeal right so actually if we go back here sorry this was a video M to show um you know you have a slider right so instead of having to like you inquire about you know you want to buy Doge and it shows you this UI so you can adjust exactly how many instead of having to do it over text it's it you know could be good the problem is that when it's stuck inside this sort of unstructured thing it starts like floating away as I try to ask follow-ups right and then at some point I even have two of them right so I go back up to the first one I press purchase and now I'm interacting with something that's completely different so it reminds me a lot of sort of that the house and up right it's just kind of up up away so instead of trying to put structure stuff it into this unstructured thing I think the answer is you pull it out right you pull it off to the side and what that means is that as the conversation continues you can just sort of update that structure without disrupting where the user is and that's exactly what Claude did with artifacts right and I think why it's so successful is that they pulled out the structure which is the app you're working on and iterating on from the actual conversation and then so as you make changes you can even go between the versions here without even having to scroll the conversation right so it's beautiful and actually brings us to another thing that I think has been really effective for AI apps which is this almost concept of Version Control so this was actually one of the like shipping like original chat CPT features which is kind of crazy but if you edit a message um you can go between the versions right and actually maintains this entire tree it's very complicated um but super powerful with v0 versell did something again amazing where it feels extremely familiar almost like you're working on Google Slides or something um but you can go back and iterate keep iterating on UI without having to be afraid that you you're losing something right so again versions again I think familiarity is really one of the most important things for unbounded products um I think Claude did an excellent job with this again I'm I'm hyping them up here but uh chat gbt introduced memory across all of your chats right completely unbounded so when I tell it something about you know some sort of medical problem as I'm working on a JavaScript it's like you know it knows that which is very weird to me um I think this idea of projects and that structure of a project is very familiar um so sharing context across a project makes more sense agents are something that are extremely unfamiliar to most people and uh this idea of having you know all these different tasks and you're feeding data between steps whatever but you know what is familiar are spreadsheets right spreadsheets are extremely familiar to not to me actually but to a lot of people and um I think the only real uses of Agents I've seen in in the world in the real world are are spreadsheet so this is Clay right and each column is essentially a step that an agent is taking to the user us is defining so it's going across it's building up kind of context across the spreadsheet each row it's often almost you you you do it like an eval right so it's like you run the first 10 rows and then you run the next 50,000 100,000 right so you get it right and you can see here eventually you end up with a personalized email as the last column um but with all these steps in between the next thing that I think is extremely effective in helping people understand what your app is for and skipping all the sort of noise of prompt hacking prompt engineering are examples and presets so chachu I think was the first for this where they had these you know message to comfort a friend plan a relaxing day and so on VZ does an awesome job with this right we're not not just having those suggest those suggestions below but they also have an explore page where you can see what other users are doing well it's actually working right again try to like shortcut this like prompt uh you know blank canvas problem notion as well right they have a simple menu where you can change tone for text instead of having to like be like uh you know you are a very concise GPT whatever whatever whatever right so you're just using these tried and proven uh things that notion can validate and that last Point brings us to the Future right so where are interfaces going in the future uh lonus gave an awesome talk last year where he described prompt engineering as this almost trying to drive a car a llama trying to drive a car with a pool noodle from the back seat was I think his his metaphor uh and there's some real truth to this right and so I think first of all the future has a lot less prompt engineering and we're already seeing this right we're already seeing this with um generative images you know the way that Apple designed it where you're mixing and matching these different concepts uh you're able you know there's a ton of demos on Twitter of people you know essentially you're going between emotions here in a more intuitive way and then just yesterday figma released this way of adjusting the tone of text right where you're going between professional casual expanded concise the problem with this is that casual means a lot of different things right casual for a Fortune 500 company and a um you know direct to Consumer Cosmetics brand uh you know with ads on on Tik Tok right these are very different things casual when talking to your best friend or a cooworker these are different so how do we avoid being reductive when trying to offer these sorts of presets and the answer is you just like m i I don't know exactly how many zeros I put here but you're just like million x or billion x the number of presets right so you have enough presets for everything and I think sparse autoencoders show a really promising path towards that so if you guys have tried golden gate CLA where you can kind of identify the one feature of Golden Gate bridess and amplify it and it makes clawed obsessed with Bridget uh Golden Gate bridges uh specifically or the Golden Gate Bridge uh my friend gdus has an amazing demo towards this but for manipulating images right so you can see here he's increasing the amount of play of light and shadows increasing the amount of serene Forest streams or Venetian canals um in again a very controllable and predictable way okay but uh so now we have a million billion options whatever how do we avoid too many options I think this gets to point three which is ranked presets so these are presets that are personalized searchable and even invoked through natural language they might not even be directly visible to the user so the user types in something like more friendly and you pull up the corresponding presets like kindness how close you are how confrontational it is again maybe they're directly editing it maybe they're not and this gets to the last point or second last point which is developer defined personalization so as soon as you're able to define those sort of features you can start tuning them per user so each user in a way that you can't do with just text prompts today right because text prompts are sort of this fragile House of Cards where if you remove one word the whole output changes so you're able to tune it per user and the last Point especially true as you start your your app is going to become increasingly different per user is shifting from evals to analytics I don't think there's going to be some objectively correct for a lot of domains answer to things like who was the first president yes but the right sort of tone for a summary for a specific user I don't think so and so I think that increasingly it's going to be about how do you understand if you're meeting the needs of your users and what they're asking for so uh that's it thank you so much oh yeah we'll skip this one and thank you so much for coming [Music] oh